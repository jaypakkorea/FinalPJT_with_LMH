import type { QueryFunction, QueryKey } from "react-query/types/core";
import type { UseInfiniteQueryOptions as UIQO, UseInfiniteQueryResult } from "react-query/types/react/types";
import { UseQueryReturnType } from "./useBaseQuery";
import type { WithQueryClientKey } from "./types";
export declare type UseInfiniteQueryOptions<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData> = WithQueryClientKey<UIQO<TQueryFnData, TError, TData>>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(options: UseInfiniteQueryOptions<TQueryFnData, TError, TData>): UseQueryReturnType<TData, TError, UseInfiniteQueryResult<TData, TError>>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(queryKey: QueryKey, options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>): UseQueryReturnType<TData, TError, UseInfiniteQueryResult<TData, TError>>;
export declare function useInfiniteQuery<TQueryFnData = unknown, TError = unknown, TData = TQueryFnData>(queryKey: QueryKey, queryFn: QueryFunction<TQueryFnData>, options?: UseInfiniteQueryOptions<TQueryFnData, TError, TData>): UseQueryReturnType<TData, TError, UseInfiniteQueryResult<TData, TError>>;
